# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import valueMS_pb2 as valueMS__pb2


class valueMicroserviceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getEnv = channel.unary_unary(
                '/valueMicroservice/getEnv',
                request_serializer=valueMS__pb2.rankreq.SerializeToString,
                response_deserializer=valueMS__pb2.ranking.FromString,
                )
        self.getWalk = channel.unary_unary(
                '/valueMicroservice/getWalk',
                request_serializer=valueMS__pb2.rankreq.SerializeToString,
                response_deserializer=valueMS__pb2.ranking.FromString,
                )
        self.getBoth = channel.unary_unary(
                '/valueMicroservice/getBoth',
                request_serializer=valueMS__pb2.rankreq.SerializeToString,
                response_deserializer=valueMS__pb2.ranking.FromString,
                )


class valueMicroserviceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getEnv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getWalk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBoth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_valueMicroserviceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getEnv': grpc.unary_unary_rpc_method_handler(
                    servicer.getEnv,
                    request_deserializer=valueMS__pb2.rankreq.FromString,
                    response_serializer=valueMS__pb2.ranking.SerializeToString,
            ),
            'getWalk': grpc.unary_unary_rpc_method_handler(
                    servicer.getWalk,
                    request_deserializer=valueMS__pb2.rankreq.FromString,
                    response_serializer=valueMS__pb2.ranking.SerializeToString,
            ),
            'getBoth': grpc.unary_unary_rpc_method_handler(
                    servicer.getBoth,
                    request_deserializer=valueMS__pb2.rankreq.FromString,
                    response_serializer=valueMS__pb2.ranking.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'valueMicroservice', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class valueMicroservice(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getEnv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/valueMicroservice/getEnv',
            valueMS__pb2.rankreq.SerializeToString,
            valueMS__pb2.ranking.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getWalk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/valueMicroservice/getWalk',
            valueMS__pb2.rankreq.SerializeToString,
            valueMS__pb2.ranking.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getBoth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/valueMicroservice/getBoth',
            valueMS__pb2.rankreq.SerializeToString,
            valueMS__pb2.ranking.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
